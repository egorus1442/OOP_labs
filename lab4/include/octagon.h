// Директива препроцессора, предотвращающая многократное включение заголовочного файла
#pragma once

// Подключаем заголовочный файл с базовым классом Figure
#include "figure.h"

// Объявляем шаблонный класс Octagon (Восьмиугольник), который наследуется от базового класса Figure
// T - это тип данных для координат (может быть int, float, double)
template <Scalar T>
class Octagon : public Figure<T> {
public:
    // Конструктор по умолчанию
    Octagon() {
        // Устанавливаем размер вектора вершин равным 8 (восьмиугольник)
        this->vertices.resize(8);
        
        // Для каждой вершины создаем новый умный указатель на объект Point
        // Используем цикл for-each для обхода всех вершин
        for (auto& vertex : this->vertices) {
            vertex = std::make_unique<Point<T>>();
        }
    }

    // Переопределяем виртуальный метод для получения количества вершин
    // override указывает, что это переопределение метода базового класса
    // const означает, что метод не изменяет состояние объекта
    size_t getVerticesCount() const override { return 8; }

    // Объявление виртуального метода для вычисления геометрического центра
    // Реализация находится в octagon.cpp
    Point<T> getGeometricCenter() const override;

    // Объявление виртуального метода для вычисления площади
    // Реализация находится в octagon.cpp
    double getArea() const override;
}; 